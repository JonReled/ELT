[{"/home/elture/projects/test/src/index.tsx":"1","/home/elture/projects/test/src/serviceWorker.js":"2","/home/elture/projects/test/src/App.tsx":"3","/home/elture/projects/test/src/Context.tsx":"4","/home/elture/projects/test/src/Stats.tsx":"5","/home/elture/projects/test/src/Login.tsx":"6","/home/elture/projects/test/src/Logs.tsx":"7","/home/elture/projects/test/src/Programs.tsx":"8","/home/elture/projects/test/src/Register.tsx":"9","/home/elture/projects/test/src/Database.tsx":"10","/home/elture/projects/test/src/components.tsx":"11","/home/elture/projects/test/src/Chart.tsx":"12","/home/elture/projects/test/src/ErrorPage.tsx":"13"},{"size":1289,"mtime":1611947727114,"results":"14","hashOfConfig":"15"},{"size":5001,"mtime":1609424439330,"results":"16","hashOfConfig":"15"},{"size":2967,"mtime":1612135279280,"results":"17","hashOfConfig":"15"},{"size":988,"mtime":1612128176882,"results":"18","hashOfConfig":"15"},{"size":6275,"mtime":1611951435909,"results":"19","hashOfConfig":"15"},{"size":2335,"mtime":1611864525334,"results":"20","hashOfConfig":"15"},{"size":11007,"mtime":1612131117526,"results":"21","hashOfConfig":"15"},{"size":5115,"mtime":1612131938208,"results":"22","hashOfConfig":"15"},{"size":4021,"mtime":1611865274311,"results":"23","hashOfConfig":"15"},{"size":11582,"mtime":1612008185184,"results":"24","hashOfConfig":"15"},{"size":801,"mtime":1611852057829,"results":"25","hashOfConfig":"15"},{"size":2004,"mtime":1611939804766,"results":"26","hashOfConfig":"15"},{"size":268,"mtime":1612134574666,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"491zs0",{"filePath":"31","messages":"32","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/elture/projects/test/src/index.tsx",[],["60","61","62","63","64"],"/home/elture/projects/test/src/serviceWorker.js",["65","66","67","68","69","70","71","72","73"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n",["74","75","76","77","78"],"/home/elture/projects/test/src/App.tsx",[],"/home/elture/projects/test/src/Context.tsx",[],"/home/elture/projects/test/src/Stats.tsx",[],"/home/elture/projects/test/src/Login.tsx",[],"/home/elture/projects/test/src/Logs.tsx",["79","80"],"import React, { useState, useContext, ReactElement, useEffect } from 'react';\nimport { Link, Route, Switch, useHistory, useParams } from 'react-router-dom';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport moment from 'moment';\nimport { v4 as uuid } from 'uuid';\nimport { LogInterface, ExercisesInterface } from 'types';\nimport { Button, Dropdown, Header, Table, Icon, Form, Input, Message } from 'semantic-ui-react';\nimport { LogStatsContext, WeightUnitContext } from './Context';\nimport { createExercise, retrieveExercise, addLog, removeLog, getDates, getWorkoutLog } from './Database';\nimport './index.css';\n\nfunction Logs(): ReactElement {\n  const history = useHistory();\n  const [clickedDate, setClickedDate] = useState<string>('');\n  const [error, setError] = useState<string>('');\n  const [dayHasLog, setDayHasLog] = useState<boolean>(false);\n  const [isInFuture, setIsInFuture] = useState<boolean>(false);\n  const [loggedDates, setLoggedDates] = useState<Array<string>>([]);\n\n  function grabDates() {\n    getDates()\n      .then((res) => setLoggedDates(res))\n      .catch((err) => setError(`An error has occurred, please try again later. ${err}`));\n  }\n\n  useEffect(() => {\n    grabDates();\n  }, []);\n\n  function handleClick(date: Date) {\n    const formattedDate = moment(date).format('DD-MM-YYYY');\n    setClickedDate(formattedDate);\n    setDayHasLog(loggedDates.includes(formattedDate));\n    setIsInFuture(moment(date).isAfter());\n    history.push(`/logs/${formattedDate}`);\n  }\n\n  function ifLogged(date: Date, view: string): string {\n    const hasLog = loggedDates.includes(moment(date).format('DD-MM-YYYY'));\n    return view === 'month' && hasLog ? 'dayWithLog' : '';\n  }\n\n  function ifFuture(date: Date, view: string): string {\n    const isFuture = moment(date).isAfter();\n    return view === 'month' && isFuture ? 'dayInFuture' : '';\n  }\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n      <Calendar onClickDay={handleClick} tileClassName={({ date, view }: { date: Date; view: string }) => [ifLogged(date, view), ifFuture(date, view)]} />\n      <Message negative style={{ display: error ? 'block' : 'none' }} header={error} />\n      <div style={{ margin: '1rem', width: '40%', display: 'flex' }}>\n        {!isInFuture && dayHasLog ? (\n          <Link to={`/logs/remove/${clickedDate}`} replace>\n            <Button content=\"Remove Log\" style={{ width: '50%' }} size=\"huge\" />\n          </Link>\n        ) : null}\n        {!isInFuture && dayHasLog ? (\n          <Link to={`/logs/view/${clickedDate}`} replace>\n            <Button content=\"View Log\" style={{ width: '50%' }} size=\"huge\" />\n          </Link>\n        ) : null}\n        {!isInFuture && !dayHasLog ? (\n          <Link to={`/logs/create/${clickedDate}`} replace>\n            <Button content=\"Create Log\" style={{ width: '50%' }} size=\"huge\" />\n          </Link>\n        ) : null}\n      </div>\n      <Switch>\n        <>\n          <Route path=\"/logs/create/:date\">\n            <LogScreenCreate />\n          </Route>\n          <Route path=\"/logs/remove/:date\">\n            <LogScreenRemove />\n          </Route>\n          <Route path=\"/logs/view/:date\">\n            <LogScreenView />\n          </Route>\n        </>\n      </Switch>\n    </div>\n  );\n}\n\nfunction LogScreenCreate(): ReactElement {\n  const history = useHistory();\n  const { date } = useParams<{ date: string }>();\n  const [selectedName, setSelectedName] = useState<string>('');\n  const [warningMessage, setWarningMessage] = useState<string>('');\n  const [bw, setBw] = useState<string>('');\n  const [bwError, setBwError] = useState<boolean>(false);\n  const log = useContext(LogStatsContext);\n\n  function addExercise() {\n    setWarningMessage('');\n    log.setStats(log.stats.concat([{ key: uuid(), exerciseName: selectedName, data: [] }]));\n    console.log(log.stats);\n  }\n\n  function handleSubmit() {\n    let invalidInput = false;\n\n    for (let i = 0; i < Object.values(log.stats).length; i++) {\n      const exercise: any = Object.values(log.stats)[i];\n\n      invalidInput = exercise.data.some(({ reps, weight }: { reps: string; weight: string }) => {\n        if (!/^\\d+$/.test(reps) || !/^\\d*\\.?(?:\\d{1,2})?$/.test(weight) || reps === '' || weight === '') {\n          return true;\n        }\n        return false;\n      });\n    }\n\n    if (log.stats.length === 0) {\n      setWarningMessage('Please enter an exercise.');\n    } else if (invalidInput) {\n      setWarningMessage('Please fill in all input boxes with valid numbers.');\n    } else if (bwError || bw === '') {\n      setWarningMessage('Please input a valid bodyweight.');\n    } else {\n      addLog(log.stats, Number(bw), date);\n      log.setStats([]);\n      history.push('/logs');\n    }\n  }\n\n  function handleChange(value) {\n    setBw(value);\n    setBwError(!/^\\d*\\.?(?:\\d{1,2})?$/.test(value));\n  }\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        padding: '1rem',\n      }}\n    >\n      <Form\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        {log.stats.map((data) => (\n          <ExerciseRow exerciseKey={data.key} key={data.key} name={data.exerciseName} />\n        ))}\n      </Form>\n      <Dropdown\n        allowAdditions\n        additionPosition=\"bottom\"\n        placeholder=\"Select Exercise\"\n        search\n        selection\n        options={retrieveExercise()}\n        onAddItem={(_, event) => createExercise(event.value as string)}\n        onChange={(_, text) => setSelectedName(text.value as string)}\n      />\n      <Input error={bwError} placeholder=\"Bodyweight\" onChange={(_, data) => handleChange(data.value)} />\n      <div style={{ margin: '3px' }}>\n        <Button onClick={addExercise}>Add exercise</Button>\n        <Button primary onClick={handleSubmit}>\n          Submit\n        </Button>\n      </div>\n      <h2 style={{ color: 'red' }}>{warningMessage}</h2>\n    </div>\n  );\n}\n\nfunction LogScreenView(): ReactElement {\n  const { date } = useParams<{ date: string }>();\n  const weightUnit = useContext(WeightUnitContext);\n  const [log, setLog] = useState<LogInterface>();\n\n  useEffect(() => {\n    getWorkoutLog(date)\n      .then((res) => setLog(res))\n      .catch((err) => console.log(err));\n  }, []);\n\n  if (log) {\n    return (\n      <div style={{ textAlign: 'center' }}>\n        <h2>\n          Bodyweight: {log.bw}\n          {weightUnit.weightUnit}\n        </h2>\n        <Table compact celled structured>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>Exercise</Table.HeaderCell>\n              <Table.HeaderCell>Reps</Table.HeaderCell>\n              <Table.HeaderCell>Weight</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n\n          <Table.Body>\n            {Object.values(log.exercises).map((el: ExercisesInterface, i: number) => (\n              <TableExerciseRow key={i} name={el.name} sets={el.sets} />\n            ))}\n          </Table.Body>\n        </Table>\n      </div>\n    );\n  }\n  return <div />;\n}\n\nfunction LogScreenRemove(): ReactElement {\n  const { date } = useParams<{ date: string }>();\n  const history = useHistory();\n\n  function removeLogAndDiv() {\n    removeLog(date);\n    history.push('/logs');\n  }\n\n  return (\n    <div style={{ display: 'block', textAlign: 'center' }}>\n      <h2>Are you sure?</h2>\n      <Button negative onClick={removeLogAndDiv}>\n        Delete\n      </Button>\n      <Button positive onClick={() => history.push('/logs')}>\n        Return\n      </Button>\n    </div>\n  );\n}\n\nfunction ExerciseRow({ name, exerciseKey }): ReactElement {\n  const log = useContext(LogStatsContext);\n  const [sets, setSets] = useState<any>([{ key: uuid(), reps: '', weight: '', repsError: false, weightError: false }]);\n\n  function addSet() {\n    setSets(sets.concat([{ key: uuid(), reps: '', weight: '', repsError: false, weightError: false }]));\n  }\n\n  function deleteExercise() {\n    log.setStats(log.stats.filter((el) => el.key !== exerciseKey));\n  }\n\n  function deleteSet(setKey: string) {\n    if (sets.length === 1) {\n      deleteExercise();\n    }\n    setSets(sets.filter((el) => el.key !== setKey));\n  }\n\n  function handleChange(value: string, type: string, setKey: string) {\n    const arr = sets;\n    const setIndex = arr.findIndex((el) => el.key === setKey);\n    if (type === 'reps') {\n      arr[setIndex].repsError = !/^\\d+$/.test(value);\n    } else {\n      arr[setIndex].weightError = !/^\\d*\\.?(?:\\d{1,2})?$/.test(value);\n    }\n    arr[setIndex][type] = value;\n    setSets(arr);\n  }\n\n  useEffect(() => {\n    const arr = log.stats;\n    const exerciseIndex = arr.findIndex((el) => el.key === exerciseKey);\n    arr[exerciseIndex].data = sets;\n    log.setStats(arr);\n  }, [sets]);\n\n  return (\n    <div style={{ width: '100%', display: 'flex' }}>\n      <div style={{ width: '20%', display: 'inline-flex', alignItems: 'flex-start', margin: '5px' }}>\n        <Icon onClick={deleteExercise} name=\"delete\" style={{ cursor: 'pointer' }} size=\"big\" color=\"red\" />\n        <p style={{ fontSize: '1.5rem' }}>{name}:</p>\n      </div>\n      <div style={{ display: 'inline' }}>\n        {sets.map((set, i) => (\n          <div key={set.key} style={{ display: 'flex', marginBottom: '3px', alignItems: 'center' }}>\n            <Form.Input error={set.repsError} placeholder=\"Reps\" onChange={(_, data) => handleChange(data.value, 'reps', set.key)} />\n            <Form.Input error={set.weightError} placeholder=\"Weight\" onChange={(_, data) => handleChange(data.value, 'weight', set.key)} />\n            <Icon onClick={() => deleteSet(set.key)} name=\"trash alternate\" style={{ cursor: 'pointer' }} size=\"large\" color=\"red\" />\n            {i === sets.length - 1 ? <Icon onClick={addSet} name=\"add\" style={{ cursor: 'pointer' }} size=\"big\" color=\"green\" /> : null}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction TableExerciseRow({ name, sets }: { name: string; sets: { weight: number; reps: number }[] }): ReactElement {\n  const weightUnit = useContext(WeightUnitContext);\n  return (\n    <>\n      {sets.map(({ weight, reps }, i) => {\n        if (i === 0) {\n          return (\n            <Table.Row key={i}>\n              <Table.Cell rowSpan={sets.length}>\n                <Header as=\"h4\" textAlign=\"center\">\n                  {name}\n                </Header>\n              </Table.Cell>\n              <Table.Cell textAlign=\"center\">{reps}</Table.Cell>\n              <Table.Cell textAlign=\"center\">\n                {weight}\n                {weightUnit.weightUnit}\n              </Table.Cell>\n            </Table.Row>\n          );\n        }\n        return (\n          <Table.Row key={i}>\n            <Table.Cell textAlign=\"center\">{reps}</Table.Cell>\n            <Table.Cell textAlign=\"center\">\n              {weight}\n              {weightUnit.weightUnit}\n            </Table.Cell>\n          </Table.Row>\n        );\n      })}\n    </>\n  );\n}\n\nexport default Logs;\n","/home/elture/projects/test/src/Programs.tsx",[],"/home/elture/projects/test/src/Register.tsx",[],"/home/elture/projects/test/src/Database.tsx",["81","82","83","84","85"],"import { ExerciseForChart, Maxes, Exercise, LogInterface } from 'types';\nimport { Program } from './Programs';\n\nconst defaultExerciseDatabase = [\n  { value: 'Bench', text: 'Bench' },\n  { value: 'Deadlift', text: 'Deadlift' },\n  { value: 'Squat', text: 'Squat' },\n];\n\nconst defaultUserSettings = {\n  weightUnit: 'kg',\n  heightUnit: 'cm',\n};\n\nconst defaultPrograms = {\n  'Starting Strength': {\n    name: 'Starting Strength',\n    author: 'Mark Rippetoe',\n    level: 'Beginner',\n    days: '3',\n    program: [\n      [\n        { exerciseName: 'Squat', Sets: 3, Reps: 5 },\n        { exerciseName: 'Bench', Sets: 3, Reps: 5 },\n        { exerciseName: 'Deadlift', Sets: 1, Reps: 5 },\n      ],\n      [\n        { exerciseName: 'Squat', Sets: 3, Reps: 5 },\n        { exerciseName: 'Press', Sets: 3, Reps: 5 },\n        { exerciseName: 'Deadlift', Sets: 1, Reps: 5 },\n      ],\n    ],\n    notes: 'The goal is to add as much weight per session as possible. Eventually you can switch out deadlifts for rows and do those every other day.',\n  },\n  'Stronglifts 5x5': {\n    name: 'Stronglifts 5x5',\n    author: 'Mehdi',\n    level: 'Beginner',\n    days: '3',\n    program: [\n      [\n        { exerciseName: 'Squat', Sets: 5, Reps: 5 },\n        { exerciseName: 'Bench', Sets: 5, Reps: 5 },\n        { exerciseName: 'Barbell Row', Sets: 5, Reps: 5 },\n      ],\n      [\n        { exerciseName: 'Squat', Sets: 5, Reps: 5 },\n        { exerciseName: 'Press', Sets: 5, Reps: 5 },\n        { exerciseName: 'Deadlift', Sets: 1, Reps: 5 },\n      ],\n    ],\n    notes: 'placeholder',\n  },\n};\n\nexport function kemmlerEquation(weight: number, reps: number): number {\n  // kemmler's equation for estimating 1rmaxes stops working after 24 reps so I'm making sure no errors occur.\n  if (reps > 24) {\n    return weight * (0.988 + 0.0104 * 24 + 0.0019 * 24 ** 2 - 0.0000584 * 24 ** 3);\n  }\n  if (reps < 0) {\n    return 0;\n  }\n  return weight * (0.988 + 0.0104 * reps + 0.0019 * reps ** 2 - 0.0000584 * reps ** 3);\n}\n\nfunction fetchWrapped(url, func): any {\n  return fetch('http://93.108.171.191:9000/checkToken', {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    credentials: 'include',\n  })\n    .then((res) => {\n      if (res.ok) {\n        return fetch(url, func);\n      }\n      throw Error();\n    })\n    .catch((err) => {\n      window.location.reload();\n    });\n}\n\nexport async function checkAuth(): Promise<boolean> {\n  const res = await fetch('http://93.108.171.191:9000/checkToken', {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    credentials: 'include',\n  });\n  return res.ok;\n}\n\nexport async function postLogin(userData: { identification: string; password: string }): Promise<void> {\n  const res = await fetch('http://93.108.171.191:9000/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n    credentials: 'include',\n  });\n  if (res.ok) {\n    window.location.reload();\n    return;\n  }\n  throw new Error(String(res.status));\n}\n\nexport async function postRegister(userData: { username: string; email: string; password: string }): Promise<boolean> {\n  const res = await fetch('http://93.108.171.191:9000/register', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n  if (res.ok) {\n    return true;\n  }\n  throw new Error(String(res.status));\n}\n\nexport async function getLogout(): Promise<void> {\n  await fetch('http://93.108.171.191:9000/logout', {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    credentials: 'include',\n  });\n  window.location.reload();\n}\n\nexport async function getLogsOfExercise(name: string): Promise<Array<ExerciseForChart>> {\n  const dailyPRs: Array<ExerciseForChart> = [];\n  try {\n    const res = await fetchWrapped(`http://93.108.171.191:9000/charts?name=${name}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n    });\n    if (res.ok) {\n      const logs: { ['date']: { weight: number; reps: number } } = JSON.parse(await res.text()).reduce((acc, cur) => {\n        if (acc[cur.date]) {\n          acc[cur.date].push({ weight: Number(cur.weight), reps: Number(cur.reps) });\n        } else {\n          acc[cur.date] = [{ weight: Number(cur.weight), reps: Number(cur.reps) }];\n        }\n        return acc;\n      }, {});\n\n      for (let i = 0; i < Object.keys(logs).length; i++) {\n        const date = Object.keys(logs)[i];\n        const currentPRs = {\n          estimated: 0,\n          tested: 0,\n        };\n\n        for (let j = 0; j < logs[date].length; j++) {\n          const estimated1RM = Math.floor(kemmlerEquation(logs[date][j].weight, logs[date][j].reps));\n\n          if (estimated1RM > currentPRs.estimated) {\n            currentPRs.estimated = estimated1RM;\n          }\n          if (logs[date][j].weight > currentPRs.tested) {\n            currentPRs.tested = logs[date][j].weight;\n          }\n        }\n\n        dailyPRs.push({ date, estimated: currentPRs.estimated, tested: currentPRs.tested });\n      }\n      return dailyPRs;\n    }\n    throw res.status;\n  } catch (err) {\n    throw new Error(err);\n  }\n}\n\nexport async function getMaxes(): Promise<Maxes> {\n  const res = await fetch(`http://93.108.171.191:9000/stats`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    credentials: 'include',\n  });\n  try {\n    if (res.ok) {\n      const userPRs: Maxes = {\n        Squat: { estimated: 0, tested: 0, bw: 0 },\n        Bench: { estimated: 0, tested: 0, bw: 0 },\n        Deadlift: { estimated: 0, tested: 0, bw: 0 },\n        Total: { estimated: 0, tested: 0, bw: 0 },\n      };\n      const logs: Array<Omit<Exercise, 'estimated' | 'tested'>> = JSON.parse(await res.text());\n\n      for (let i = 0; i < logs.length; i++) {\n        const { name, weight, reps, bw } = logs[i];\n\n        const currentEstimatedPR = userPRs[name].estimated;\n        const currentTestedPR = userPRs[name].tested;\n\n        if (kemmlerEquation(weight, reps) > currentEstimatedPR) {\n          userPRs[name].bw = Math.max(bw, userPRs[name].bw);\n          userPRs[name].estimated = Math.floor(kemmlerEquation(weight, reps));\n        }\n\n        if (weight > currentTestedPR) {\n          userPRs[name].bw = Math.max(bw, userPRs[name].bw);\n          userPRs[name].tested = weight;\n        }\n      }\n\n      userPRs.Total.estimated = userPRs.Bench.estimated + userPRs.Squat.estimated + userPRs.Deadlift.estimated;\n      userPRs.Total.tested = userPRs.Bench.tested + userPRs.Squat.tested + userPRs.Deadlift.tested;\n      userPRs.Total.bw = Math.max(userPRs.Bench.bw, userPRs.Squat.bw, userPRs.Deadlift.bw);\n      localPostUserPR(userPRs);\n      return userPRs;\n    }\n    throw res.status;\n  } catch (err) {\n    throw new Error(err);\n  }\n}\n\nexport function localPostUserPR(userPRs: Maxes): void {\n  localStorage.setItem('userPRs', JSON.stringify(userPRs));\n}\n\nexport function localGetUserPR(): Maxes {\n  return JSON.parse(localStorage.getItem('userPRs') as string);\n}\n\nexport async function getDates(): Promise<Array<string>> {\n  const res = await fetch('http://93.108.171.191:9000/workout/dates', {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    credentials: 'include',\n  });\n  try {\n    if (res.ok) {\n      return JSON.parse(await res.text());\n    }\n    throw res.status;\n  } catch (err) {\n    throw new Error(err);\n  }\n}\n\nexport async function getWorkoutLog(date: string): Promise<LogInterface> {\n  const res = await fetch(`http://93.108.171.191:9000/workout/log?date=${date}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    credentials: 'include',\n  });\n  try {\n    if (res.ok) {\n      const arr = JSON.parse(await res.text());\n\n      const obj: LogInterface = {\n        bw: arr[0].bw,\n        exercises: arr.reduce((acc, cur) => {\n          if (acc[cur.id]) {\n            acc[cur.id].sets.push({ weight: cur.weight, reps: cur.reps });\n          } else {\n            acc[cur.id] = { name: cur.name, sets: [{ weight: cur.weight, reps: cur.reps }] };\n          }\n          return acc;\n        }, {}),\n      };\n      return obj;\n    }\n    throw res.status;\n  } catch (err) {\n    throw new Error(err);\n  }\n}\n\nexport function createExercise(exerciseName: string): void {\n  let currentDatabase: any;\n  if (localStorage.getItem('exerciseDatabase') === null) {\n    currentDatabase = defaultExerciseDatabase;\n  } else {\n    currentDatabase = JSON.parse(localStorage.getItem('exerciseDatabase') as string);\n  }\n\n  currentDatabase.push({ value: exerciseName, text: exerciseName });\n  localStorage.setItem('exerciseDatabase', JSON.stringify(currentDatabase));\n}\n\nexport function retrieveExercise(): Array<{ value: string; text: string }> {\n  if (localStorage.getItem('exerciseDatabase') === null) {\n    return defaultExerciseDatabase;\n  }\n  return JSON.parse(localStorage.getItem('exerciseDatabase') as string);\n}\n\nexport function addLog(exerciseLog: any, bw: number, date: string): void {\n  console.log(exerciseLog);\n  fetch('http://93.108.171.191:9000/workout', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ date, bw, exerciseLog }),\n    credentials: 'include',\n  }).then((res) => console.log(res.status));\n}\n\nexport function removeLog(date: string): void {\n  fetchWrapped(`http://93.108.171.191:9000/workout?date=${date}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    credentials: 'include',\n  }).then((res) => console.log(res.status));\n}\n\nexport function getAllLogs(): any {\n  return 'a';\n}\n\nexport function retrieveLog(date: string): any {\n  fetch(`http://93.108.171.191:9000/workout/log?date=${date}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    credentials: 'include',\n  }).then((res) => {\n    if (res.status === 200) {\n      return res.text();\n    }\n    return 'error';\n  });\n}\n\nexport function updateUserSettings(settingName: string, value: string): void {\n  if (localStorage.getItem('userSettings') === null) {\n    localStorage.setItem('userSettings', JSON.stringify(defaultUserSettings));\n  } else {\n    const currentSettings = JSON.parse(localStorage.getItem('userSettings') as string);\n    currentSettings[settingName] = value;\n    localStorage.setItem('userSettings', JSON.stringify(currentSettings));\n  }\n}\n\nexport function retrieveUserSettings(settingName: string): string {\n  let returnedSetting: string;\n  if (localStorage.getItem('userSettings') === null) {\n    returnedSetting = defaultUserSettings[settingName];\n  } else {\n    returnedSetting = JSON.parse(localStorage.getItem('userSettings') as string)[settingName];\n  }\n\n  return returnedSetting;\n}\n\nexport function setUserProgram(program: Omit<Program, 'setViewedName' | 'setEditing'>): void {\n  const currentPrograms = JSON.parse(localStorage.getItem('databasePrograms') as string);\n  currentPrograms[program.name] = program;\n  localStorage.setItem('databasePrograms', JSON.stringify(currentPrograms));\n  localStorage.setItem('userProgram', JSON.stringify(program));\n}\n\nexport function retrievePrograms(): Array<Omit<Program, 'setViewedName' | 'setEditing'>> {\n  if (localStorage.getItem('databasePrograms') !== null) {\n    return Object.values(JSON.parse(localStorage.getItem('databasePrograms') as string));\n  }\n  localStorage.setItem('databasePrograms', JSON.stringify(defaultPrograms));\n  return Object.values(defaultPrograms);\n}\n","/home/elture/projects/test/src/components.tsx",[],["86","87","88","89","90"],"/home/elture/projects/test/src/Chart.tsx",[],"/home/elture/projects/test/src/ErrorPage.tsx",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":21,"column":8,"nodeType":"103","messageId":"104","endLine":21,"endColumn":33},{"ruleId":"101","severity":1,"message":"105","line":21,"column":26,"nodeType":"106","messageId":"107","endLine":21,"endColumn":32},{"ruleId":"108","severity":1,"message":"109","line":42,"column":11,"nodeType":"110","messageId":"111","endLine":42,"endColumn":22},{"ruleId":"108","severity":1,"message":"109","line":68,"column":15,"nodeType":"110","messageId":"111","endLine":68,"endColumn":26},{"ruleId":"108","severity":1,"message":"109","line":78,"column":15,"nodeType":"110","messageId":"111","endLine":78,"endColumn":26},{"ruleId":"108","severity":1,"message":"109","line":90,"column":7,"nodeType":"110","messageId":"111","endLine":90,"endColumn":20},{"ruleId":"108","severity":1,"message":"109","line":115,"column":7,"nodeType":"110","messageId":"111","endLine":115,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":119,"column":8,"nodeType":"103","messageId":"104","endLine":119,"endColumn":29},{"ruleId":"108","severity":1,"message":"109","line":126,"column":9,"nodeType":"110","messageId":"111","endLine":126,"endColumn":22},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"108","severity":1,"message":"109","line":99,"column":5,"nodeType":"110","messageId":"111","endLine":99,"endColumn":16},{"ruleId":"108","severity":1,"message":"109","line":184,"column":23,"nodeType":"110","messageId":"111","endLine":184,"endColumn":34},{"ruleId":"112","severity":1,"message":"113","line":81,"column":13,"nodeType":"106","messageId":"114","endLine":81,"endColumn":16},{"ruleId":"101","severity":1,"message":"115","line":309,"column":24,"nodeType":"106","messageId":"116","endLine":309,"endColumn":40},{"ruleId":"108","severity":1,"message":"109","line":310,"column":3,"nodeType":"110","messageId":"111","endLine":310,"endColumn":14},{"ruleId":"108","severity":1,"message":"109","line":318,"column":20,"nodeType":"110","messageId":"111","endLine":318,"endColumn":31},{"ruleId":"108","severity":1,"message":"109","line":328,"column":20,"nodeType":"110","messageId":"111","endLine":328,"endColumn":31},{"ruleId":"91","replacedBy":"117"},{"ruleId":"93","replacedBy":"118"},{"ruleId":"95","replacedBy":"119"},{"ruleId":"97","replacedBy":"120"},{"ruleId":"99","replacedBy":"121"},"lines-around-directive",["122"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","Argument 'config' should be typed.","Identifier","missingArgType","no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/no-unused-vars","'err' is defined but never used.","unusedVar","Argument 'exerciseLog' should be typed with a non-any type.","anyTypedArg",["122"],[],[],[],[],"padding-line-between-statements"]